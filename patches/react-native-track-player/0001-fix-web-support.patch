diff -Nur a/lib/trackPlayer.web.js b/lib/trackPlayer.web.js
--- a/lib/trackPlayer.web.js	1970-01-01 01:00:00.000000000 +0100
+++ b/lib/trackPlayer.web.js	2021-04-02 16:03:00.185821800 +0200
@@ -0,0 +1,177 @@
+import { DeviceEventEmitter } from 'react-native';
+
+const { TrackPlayerModule: TrackPlayer } = require("../web/TrackPlayer");
+
+const emitter = DeviceEventEmitter;
+
+function setupPlayer(options) {
+    return TrackPlayer.setupPlayer(options || {});
+}
+
+function updateOptions(data) {
+    // Clone the object before modifying it, so we don't run into problems with immutable objects
+    data = Object.assign({}, data);
+
+    return TrackPlayer.updateOptions(data);
+}
+
+function add(tracks, insertBeforeId) {
+    // Clone the array before modifying it, so we don't run into problems with immutable objects
+    if(Array.isArray(tracks)) {
+      tracks = [...tracks];
+    } else {
+      tracks = [tracks];
+    }
+
+    if(tracks.length < 1) return;
+
+    for(let i = 0; i < tracks.length; i++) {
+        // Clone the object before modifying it
+        tracks[i] = Object.assign({}, tracks[i]);
+
+        // Cast ID's into strings
+        tracks[i].id = `${tracks[i].id}`
+    }
+
+    return TrackPlayer.add(tracks, insertBeforeId);
+}
+
+function remove(tracks) {
+    if(!Array.isArray(tracks)) {
+        tracks = [tracks];
+    }
+
+    return TrackPlayer.remove(tracks);
+}
+
+function updateMetadataForTrack(id, metadata) {
+    // Clone the object before modifying it
+    metadata = Object.assign({}, metadata);
+
+    return TrackPlayer.updateMetadataForTrack(id, metadata);
+}
+
+function registerPlaybackService(serviceFactory) {
+    // Initializes and runs the service in the next tick
+    setImmediate(serviceFactory());
+}
+
+function addEventListener(event, listener) {
+    return emitter.addListener(event, listener);
+}
+
+function warpEventResponse(handler, event, payload) {
+    // transform into the old format and return to handler
+    const additionalKeys = payload || {};
+    handler({ type: event, ...additionalKeys });
+}
+
+/**
+ * @deprecated since version 1.0.1. Use addEventListener instead.
+ */
+function registerEventHandler(handler) {
+    let events = [
+        'playback-state',
+        'playback-error',
+        'playback-queue-ended',
+        'playback-track-changed',
+
+        'remote-play',
+        'remote-pause',
+        'remote-stop',
+        'remote-next',
+        'remote-previous',
+        'remote-jump-forward',
+        'remote-jump-backward',
+        'remote-seek',
+        'remote-duck',
+    ];
+
+    registerPlaybackService(() => {
+        return async function() {
+            for (let i = 0; i < events.length; i++) {
+                addEventListener(events[i], warpEventResponse.bind(null, handler, events[i]));
+            }
+        };
+    });
+}
+
+// We'll declare each one of the constants and functions manually so IDEs can show a list of them
+// We should also add documentation here, but I'll leave this task to another day
+
+// States
+module.exports.STATE_NONE = TrackPlayer.STATE_NONE;
+module.exports.STATE_READY = TrackPlayer.STATE_READY;
+module.exports.STATE_PLAYING = TrackPlayer.STATE_PLAYING;
+module.exports.STATE_PAUSED = TrackPlayer.STATE_PAUSED;
+module.exports.STATE_STOPPED = TrackPlayer.STATE_STOPPED;
+module.exports.STATE_BUFFERING = TrackPlayer.STATE_BUFFERING;
+module.exports.STATE_CONNECTING = TrackPlayer.STATE_CONNECTING;
+
+// Capabilities
+module.exports.CAPABILITY_PLAY = TrackPlayer.CAPABILITY_PLAY;
+module.exports.CAPABILITY_PLAY_FROM_ID = TrackPlayer.CAPABILITY_PLAY_FROM_ID;
+module.exports.CAPABILITY_PLAY_FROM_SEARCH = TrackPlayer.CAPABILITY_PLAY_FROM_SEARCH;
+module.exports.CAPABILITY_PAUSE = TrackPlayer.CAPABILITY_PAUSE;
+module.exports.CAPABILITY_STOP = TrackPlayer.CAPABILITY_STOP;
+module.exports.CAPABILITY_SEEK_TO = TrackPlayer.CAPABILITY_SEEK_TO;
+module.exports.CAPABILITY_SKIP = TrackPlayer.CAPABILITY_SKIP;
+module.exports.CAPABILITY_SKIP_TO_NEXT = TrackPlayer.CAPABILITY_SKIP_TO_NEXT;
+module.exports.CAPABILITY_SKIP_TO_PREVIOUS = TrackPlayer.CAPABILITY_SKIP_TO_PREVIOUS;
+module.exports.CAPABILITY_JUMP_FORWARD = TrackPlayer.CAPABILITY_JUMP_FORWARD;
+module.exports.CAPABILITY_JUMP_BACKWARD = TrackPlayer.CAPABILITY_JUMP_BACKWARD;
+module.exports.CAPABILITY_SET_RATING = TrackPlayer.CAPABILITY_SET_RATING;
+module.exports.CAPABILITY_LIKE = TrackPlayer.CAPABILITY_LIKE;
+module.exports.CAPABILITY_DISLIKE = TrackPlayer.CAPABILITY_DISLIKE;
+module.exports.CAPABILITY_BOOKMARK = TrackPlayer.CAPABILITY_BOOKMARK;
+
+// Pitch algorithms
+module.exports.PITCH_ALGORITHM_LINEAR = TrackPlayer.PITCH_ALGORITHM_LINEAR;
+module.exports.PITCH_ALGORITHM_MUSIC = TrackPlayer.PITCH_ALGORITHM_MUSIC;
+module.exports.PITCH_ALGORITHM_VOICE = TrackPlayer.PITCH_ALGORITHM_VOICE;
+
+// Rating Types
+module.exports.RATING_HEART = TrackPlayer.RATING_HEART;
+module.exports.RATING_THUMBS_UP_DOWN = TrackPlayer.RATING_THUMBS_UP_DOWN;
+module.exports.RATING_3_STARS = TrackPlayer.RATING_3_STARS;
+module.exports.RATING_4_STARS = TrackPlayer.RATING_4_STARS;
+module.exports.RATING_5_STARS = TrackPlayer.RATING_5_STARS;
+module.exports.RATING_PERCENTAGE = TrackPlayer.RATING_PERCENTAGE;
+
+// General
+module.exports.setupPlayer = setupPlayer;
+module.exports.destroy = TrackPlayer.destroy;
+module.exports.updateOptions = updateOptions;
+module.exports.registerEventHandler = registerEventHandler;
+module.exports.registerBackendService = registerPlaybackService;
+module.exports.registerPlaybackService = registerPlaybackService;
+module.exports.addEventListener = addEventListener;
+
+// Player Queue Commands
+module.exports.add = add;
+module.exports.remove = remove;
+module.exports.skip = TrackPlayer.skip;
+module.exports.getQueue = TrackPlayer.getQueue;
+module.exports.skipToNext = TrackPlayer.skipToNext;
+module.exports.skipToPrevious = TrackPlayer.skipToPrevious;
+module.exports.updateMetadataForTrack = updateMetadataForTrack;
+module.exports.removeUpcomingTracks = TrackPlayer.removeUpcomingTracks;
+
+// Player Playback Commands
+module.exports.reset = TrackPlayer.reset;
+module.exports.play = TrackPlayer.play;
+module.exports.pause = TrackPlayer.pause;
+module.exports.stop = TrackPlayer.stop;
+module.exports.seekTo = TrackPlayer.seekTo;
+module.exports.setVolume = TrackPlayer.setVolume;
+module.exports.setRate = TrackPlayer.setRate;
+
+// Player Getters
+module.exports.getTrack = TrackPlayer.getTrack;
+module.exports.getCurrentTrack = TrackPlayer.getCurrentTrack;
+module.exports.getVolume = TrackPlayer.getVolume;
+module.exports.getDuration = TrackPlayer.getDuration;
+module.exports.getPosition = TrackPlayer.getPosition;
+module.exports.getBufferedPosition = TrackPlayer.getBufferedPosition;
+module.exports.getState = TrackPlayer.getState;
+module.exports.getRate = TrackPlayer.getRate;
\ No newline at end of file
diff -Nur a/web/MediaSession.js b/web/MediaSession.js
--- a/web/MediaSession.js	1970-01-01 01:00:00.000000000 +0100
+++ b/web/MediaSession.js	2021-04-01 04:30:13.875530500 +0200
@@ -0,0 +1,41 @@
+export default class MediaSession {
+    constructor(play, pause, skipToNext, skipToPrevious) {
+        if ("mediaSession" in navigator) {
+            navigator.mediaSession.playbackState = "none";
+            
+            const handlers = [
+                ['play', play],
+                ['pause', pause],
+                ['nexttrack', skipToNext],
+                ['previoustrack', skipToPrevious]
+            ];
+
+            for (const [action, handler] of handlers) {
+                try { navigator.mediaSession.setActionHandler(action, handler); }
+                catch{ console.log(action + " is not supported yet"); }
+            }
+        }
+    }
+
+    setPlaying = () => {
+        if ("mediaSession" in navigator)
+            navigator.mediaSession.playbackState = "playing";
+    }
+
+    setPaused = () => {
+        if ("mediaSession" in navigator)
+            navigator.mediaSession.playbackState = "paused";
+    }
+
+    setMetadata = (title, artist, artwork) => {
+        if ("mediaSession" in navigator) {
+            navigator.mediaSession.metadata = new MediaMetadata({
+                title: title,
+                artist: artist,
+                artwork: [
+                    { src: artwork, type: 'image/png' },
+                ]
+            });
+        }
+    }
+}
\ No newline at end of file
diff -Nur a/web/TrackPlayer.js b/web/TrackPlayer.js
--- a/web/TrackPlayer.js	1970-01-01 01:00:00.000000000 +0100
+++ b/web/TrackPlayer.js	2021-04-02 04:34:28.021476700 +0200
@@ -0,0 +1,310 @@
+import { DeviceEventEmitter } from "react-native";
+import MediaSession from "./MediaSession";
+
+export default class RNTrackPlayer {
+    STATE_NONE = 0;
+    STATE_STOPPED = 1;
+    STATE_PAUSED = 2;
+    STATE_PLAYING = 3;
+    STATE_BUFFERING = 4;
+
+    PLAYBACK_STATE = "playback-state";
+    PLAYBACK_TRACK_CHANGED = "playback-track-changed";
+    PLAYBACK_QUEUE_ENDED = "playback-queue-ended";
+    PLAYBACK_ERROR = "playback-error";
+    PLAYBACK_METADATA_RECEIVED = "playback-metadata-received";
+
+    constructor() {
+        this.emitter = DeviceEventEmitter;
+        this.mediaSession = new MediaSession(
+            this.play,
+            this.pause,
+            this.skipToNext,
+            this.skipToPrevious
+        );
+
+        this.audio;
+        this.currentId = null;
+
+        this.playlist = [];
+        this.track;
+        this.index;
+    }
+
+    _emitNextTrack = id => {
+        let position = this.audio != null
+            ? this.audio.currentTime
+            : -0.01
+
+        this.emitter.emit(
+            this.PLAYBACK_TRACK_CHANGED,
+            {nextTrack: id, position: position, track: this.currentId}
+        );
+
+        this.currentId = id;
+    }
+
+
+    play = () => {
+        if (this.audio != null) {
+            this.audio.play();
+            if (!this.audio.paused) {
+                this.emitter.emit(this.PLAYBACK_STATE, {state: this.STATE_PLAYING});
+                this.mediaSession.setPlaying();
+            } else {
+                this.emitter.emit(this.PLAYBACK_STATE, {state: this.STATE_PAUSED});
+                this.mediaSession.setPaused();
+            }
+        }
+    }
+
+    pause = () => {
+        if (this.audio != null) {
+            this.audio.pause();
+            this.mediaSession.setPaused();
+            this.emitter.emit(this.PLAYBACK_STATE, {state: this.STATE_PAUSED});
+        }
+    }
+
+    remove = id => {
+        let newList = []
+        for (let i = 0; i < this.playlist.length; i++) {
+            if (this.playlist[i].id != id)
+                newList.push(this.playlist[i]);
+        }
+
+        this.playlist = newList;
+    }
+
+    add = (track_list, afterId) => {
+        if (afterId == undefined)
+            afterId = null;
+
+        if (afterId == null) {
+            for (let i = 0; i < track_list.length; i++) {
+                this.playlist.push(track_list[i]);
+            }
+        } else {
+            let newList = [];
+            for (let i = 0; i < this.playlist.length; i++) {
+                if (this.playlist[i].id == afterId) {
+                    for (let j = 0; j < track_list.length; j++) {
+                        newList.push(track_list[j]);
+                    }
+
+                    newList.push(this.playlist[i]);
+
+                } else {
+                    newList.push(this.playlist[i]);
+
+                }
+            }
+
+            this.playlist = newList;
+        }
+    }
+
+    stop = () => {
+        return new Promise((resolve, reject) => {
+            if (this.audio != null)
+                this.audio.stop();
+            resolve();
+        });
+    }
+
+    reset = () => {
+        return new Promise((resolve, reject) => {
+            if (this.audio != null)
+                this.audio.pause();
+
+            this.track = null;
+            this.playlist = [];
+            this.emitter.emit(this.PLAYBACK_STATE, {state: this.STATE_NONE});
+            resolve();
+        });
+        
+    }
+
+    destroy = () => {
+        return new Promise((resolve, reject) => {
+            this.track = null;
+            this.playlist = [];
+            this.emitter.emit(this.PLAYBACK_STATE, {state: this.STATE_NONE});
+            resolve();
+        });
+    }
+
+    skip = id => {
+        return new Promise((resolve, reject) => {
+            this.emitter.emit(this.PLAYBACK_STATE, {state: this.STATE_BUFFERING});
+            for (let i = 0; i < this.playlist.length; i++) {
+                if (this.playlist[i].id == id) {
+                    if (this.playlist[i].url != null) {
+                        this.index = i;
+                        this.track = this.playlist[i];
+
+                        if (this.audio == null) {
+                            this.audio = new Audio(this.track.url);
+                            this.audio.addEventListener("ended", e => {
+                                this.emitter.emit(this.PLAYBACK_STATE, { state: this.STATE_BUFFERING});
+                                this.mediaSession.setPaused();
+                                this.skipToNext(true);
+                            });
+                        } else
+                            this.audio.src = this.track.url;
+                        
+                        this._emitNextTrack(id);
+                        
+                        try {
+                            this.mediaSession.setMetadata(this.track.title, this.track.artist, this.track.artwork);
+                            this.audio.play();
+                            if (!this.audio.paused) {
+                                this.emitter.emit(this.PLAYBACK_STATE, { state: this.STATE_PLAYING });
+                                this.mediaSession.setPlaying();
+                            } else {
+                                this.emitter.emit(this.PLAYBACK_STATE, { state: this.STATE_PAUSED });
+                                this.mediaSession.setPaused();
+                            }
+                            
+                        } catch (e) {
+                            console.log(e);
+                        }
+
+                    } else
+                        this.emitter.emit(this.PLAYBACK_ERROR, { reason: "url is missing" });
+
+                    resolve();
+                    break;
+                }
+            }
+        });
+    }
+
+    skipToNext = async(wasPlaying) => {
+        if (this.playlist != null) {
+            if (this.playlist.length != this.index) {
+                this.audio.pause();
+                await this.skip(this.playlist[this.index + 1].id);
+
+                if (wasPlaying)
+                    this.play();
+            }
+        }
+    }
+
+    skipToPrevious = () => {
+        if (this.playlist != null) {
+            if (this.index != 0) {
+                this.audio.pause();
+                this.skip(this.playlist[this.index - 1].id);
+            }
+        }
+    }
+
+    removeUpcomingTracks = () => {
+        return new Promise((resolve, reject) => {
+            if (this.audio != null) {
+                if (this.audio.fastSeek != undefined)
+                    this.audio.fastSeek(seconds);
+                else
+                    this.audio.currentTime = seconds;
+            }
+            resolve(seconds);
+        });
+    }
+
+    setVolume = () => {}
+
+    setRate = () => {}
+
+    seekTo = seconds => {
+        return new Promise((resolve, reject) => {
+            if (this.audio != null) {
+                if (this.audio.fastSeek != undefined)
+                    this.audio.fastSeek(seconds);
+                else
+                    this.audio.currentTime = seconds;
+            }
+            resolve(seconds);
+        });
+    }
+
+    getTrack = id => {
+        return new Promise((resolve, reject) => {
+            for (let i = 0; i < this.playlist.length; i++) {
+                if (this.playlist[i].id == id)
+                    resolve(this.playlist[i]);
+            }
+        });
+    }
+
+    getCurrentTrack = () => {
+        return new Promise((resolve, reject) => {
+            if (this.track != null)
+                resolve(this.track.id);
+            else
+                resolve(null);
+            
+        });
+    }
+
+    getPosition = () => {
+        return new Promise((resolve, reject) => {
+            if (this.audio != null)
+                resolve(this.audio.currentTime);
+            else
+                resolve(0); 
+        });
+    }
+
+    getVolume = () => {}
+
+    getDuration = () => {
+        return new Promise((resolve, reject) => {
+            if (this.audio != null)
+                resolve(this.track.duration);
+            else
+                resolve(0);
+        });
+    }
+
+
+    getBufferedPosition = () => {
+        return new Promise((resolve, reject) => {
+            if (this.audio != null)
+                resolve(this.audio.buffered);
+        });
+    }
+
+    getState = () => {
+        return new Promise((resolve, reject) => {
+            if (this.audio == null)
+                resolve(this.STATE_NONE);
+            else {
+                if (this.audio.paused)
+                    resolve(this.STATE_PAUSED);
+                else
+                    resolve(this.STATE_PLAYING);
+            }
+        });
+    }
+
+    getRate = () => {
+        return new Promise((resolve, reject) => {
+            if (this.audio != null)
+                resolve(this.audio.defaultPlaybackRate);
+            else
+                resolve(null);
+        });
+    }
+
+    getQueue = () => {
+        return new Promise((resolve, reject) => {
+            resolve(this.playlist);
+        });
+    }
+
+    updateOptions = () => {}
+}
+
+module.exports = {TrackPlayerModule: new RNTrackPlayer()};
\ No newline at end of file
